Lexeme : name&							invalid identifier
Lexeme : name_							identifier
Lexeme : na_me							identifier
Lexeme : #name							invalid identifier
Lexeme : $name							invalid identifier
Lexeme : #name							invalid identifier
Lexeme : _nume							invalid identifier
Lexeme : 12name							invalid identifier
Lexeme : na12me							identifier
Lexeme : name12							identifier
Lexeme : domskrt							identifier
Lexeme : 1							int_literal
Lexeme : 12.3							float_literal
Lexeme : 1.2.3							invalid float_literal
Lexeme : er							identifier
Lexeme : "no"								str_literal
Lexeme : \backward slash\								str_literal
Lexeme : ""								str_literal
Lexeme : "								str_literal
Lexeme : \								str_literal
Lexeme : efren "bata" reyes								str_literal
Lexeme : 								invalid char_literal
Lexeme :  								char_literal
Lexeme : '								char_literal
Lexeme : \								char_literal
Lexeme : "								char_literal
Lexeme : hello								invalid char_literal
Lexeme : h								char_literal
Lexeme : 'hello'								invalid char_literal
Lexeme : ss's'								invalid char_literal
Lexeme : \h\								invalid char_literal
Lexeme : holla\'								invalid char_literal
Lexeme : Identifier					comment
Lexeme : dom							identifier
Lexeme : my_name							identifier
Lexeme : name14							identifier
Lexeme : Assignment Operators					comment
Lexeme : =								=
Lexeme : +=								+=
Lexeme : -=								-=
Lexeme : *=								*=
Lexeme : /=								/=
Lexeme : %=								%=
Lexeme : //=								//=
Lexeme : Unary Operators					comment
Lexeme : ++								++
Lexeme : --								--
Lexeme : Arithmetic Operators					comment
Lexeme : +								+
Lexeme : -								-
Lexeme : *								*
Lexeme : /								/
Lexeme : %								%
Lexeme : **								**
Lexeme : //								//
Lexeme : Logical Operators					comment
Lexeme : y							and_op
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : Boolean Relational Operators					comment
Lexeme : ==								==
Lexeme : !=								!=
Lexeme : >								>
Lexeme : <								<
Lexeme : >=								>=
Lexeme : <=								<=
Lexeme : Keywords					comment
Lexeme : bool							boolean_keyword
Lexeme : cuer							string_keyword
Lexeme : dec							elif_keyword
Lexeme : descanso							break_keyword
Lexeme : doble							double_keyword
Lexeme : ent							integer_keyword
Lexeme : escan							scanf_keyword
Lexeme : flot							float_keyword
Lexeme : hacer							do_keyword
Lexeme : impri							printf_keyword
Lexeme : mas							else_keyword
Lexeme : mientras							while_keyword
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : perso							char_keyword
Lexeme : por							for_keyword
Lexeme : retorno							return_keyword
Lexeme : sequir							continue_keyword
Lexeme : si							if_keyword
Lexeme : vacio							void_keyword
Lexeme : vamos							goto_keyword
Lexeme : y							and_op
Lexeme : Reserved Word					comment
Lexeme : falso							false_reserved
Lexeme : verdad							true_reserved
Lexeme : Noise Words					comment
Lexeme : booleano							boolean_noiseword
Lexeme : decontra							elif_noiseword
Lexeme : personaje							char_noiseword
Lexeme : entero							integer_noiseword
Lexeme : escanear							scanf_noiseword
Lexeme : flotar							float_noiseword
Lexeme : cuerda							string_noiseword
Lexeme : imprimir							printf_noiseword
Lexeme : Delimeters					comment
Lexeme : :								:
Lexeme : (								(
Lexeme : )								)
Lexeme : [								[
Lexeme : ]								]
Lexeme : {								{
Lexeme : }								}
Lexeme : ,								,
Lexeme : ;								;
Lexeme : invalid					comment
Unknown input : 							@
Lexeme : _num							invalid identifier
Lexeme : */								invalid operator
Lexeme : invalid								invalid char_literal
Lexeme : constant value					comment
Lexeme : 9							int_literal
Lexeme : 4.5							float_literal
Lexeme : string								str_literal
Lexeme : c								char_literal
Lexeme : myname							identifier
Lexeme : 14name							invalid identifier
Lexeme : my_name							identifier
Unknown input : 							###
Lexeme : na$me							invalid identifier
Lexeme : namee$							invalid identifier
Lexeme : na14me							identifier
Lexeme : na_me							identifier
Lexeme : name_							identifier
Lexeme : (								(
Lexeme : )								)
Lexeme : {								{
Lexeme : }								}
Lexeme : [								[
Lexeme : ]								]
Lexeme : ;								;
Lexeme : :								:
Lexeme : ,								,
Unknown input : 							5$
Unknown input : 							@
Lexeme : name							identifier
Lexeme : _name							invalid identifier
Lexeme : 14name							invalid identifier
Lexeme : name14							identifier
Lexeme : \n							invalid identifier
Lexeme : $name							invalid identifier
Lexeme : name_14							identifier
Lexeme : 					comment
Lexeme : zz					comment
Lexeme : 								invalid char_literal
Lexeme : a								char_literal
Lexeme : aaa								invalid char_literal
Lexeme :  								char_literal
Lexeme :  								str_literal
Lexeme : a								str_literal
Lexeme : 930232							int_literal
Lexeme : 34.34							float_literal
Lexeme : 0.3.0							invalid float_literal
Lexeme : 2.2323.232							invalid float_literal
Lexeme : 87634							int_literal
Lexeme : 345.4							float_literal
Lexeme : =								=
Lexeme : +=								+=
Lexeme : -=								-=
Lexeme : *=								*=
Lexeme : /=								/=
Lexeme : %=								%=
Lexeme : //=								//=
Lexeme : ++								++
Lexeme : --								--
Lexeme : +								+
Lexeme : -								-
Lexeme : *								*
Lexeme : /								/
Lexeme : %								%
Lexeme : **								**
Lexeme : //								//
Lexeme : ==								==
Lexeme : !=								!=
Lexeme : >								>
Lexeme : y							and_op
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : <								<
Lexeme : >=								>=
Lexeme : <=								<=
Lexeme : bool							boolean_keyword
Lexeme : cuer							string_keyword
Lexeme : dec							elif_keyword
Lexeme : descanso							break_keyword
Lexeme : doble							double_keyword
Lexeme : ent							integer_keyword
Lexeme : escan							scanf_keyword
Lexeme : flot							float_keyword
Lexeme : hacer							do_keyword
Lexeme : impri							printf_keyword
Lexeme : mas							else_keyword
Lexeme : mientras							while_keyword
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : perso							char_keyword
Lexeme : por							for_keyword
Lexeme : retorno							return_keyword
Lexeme : sequir							continue_keyword
Lexeme : si							if_keyword
Lexeme : vacio							void_keyword
Lexeme : vamos							goto_keyword
Lexeme : y							and_op
Lexeme : falso							false_reserved
Lexeme : verdad							true_reserved
Lexeme : booleano							boolean_noiseword
Lexeme : decontra							elif_noiseword
Lexeme : personaje							char_noiseword
Lexeme : entero							integer_noiseword
Lexeme : escanear							scanf_noiseword
Lexeme : flotar							float_noiseword
Lexeme : cuerda							string_noiseword
Lexeme : imprimir							printf_noiseword
Lexeme : 9							int_literal
Lexeme : 4.5							float_literal
Lexeme : string								str_literal
Lexeme : c								char_literal
Lexeme : myname							identifier
Lexeme : 14name							invalid identifier
Lexeme : my_name							identifier
Lexeme : myname							identifier
Lexeme : 14name							invalid identifier
Lexeme : my_name							identifier
Lexeme : 3.14.14							invalid float_literal
Lexeme : cat								invalid char_literal
Lexeme : domskrt							identifier
Lexeme : -								-
Lexeme : 8							int_literal
Lexeme : tite							identifier
Lexeme : Identifier					comment
Lexeme : dom							identifier
Lexeme : domskrt							identifier
Lexeme : my_name							identifier
Lexeme : name14							identifier
Lexeme : Assignment Operators					comment
Lexeme : =								=
Lexeme : +=								+=
Lexeme : -=								-=
Lexeme : *=								*=
Lexeme : /=								/=
Lexeme : %=								%=
Lexeme : //=								//=
Lexeme : Unary Operators					comment
Lexeme : ++								++
Lexeme : --								--
Lexeme : Arithmetic Operators					comment
Lexeme : +								+
Lexeme : -								-
Lexeme : *								*
Lexeme : /								/
Lexeme : %								%
Lexeme : **								**
Lexeme : //								//
Lexeme : Logical Operators					comment
Lexeme : y							and_op
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : Boolean Relational Operators					comment
Lexeme : ==								==
Lexeme : !=								!=
Lexeme : >								>
Lexeme : <								<
Lexeme : >=								>=
Lexeme : <=								<=
Lexeme : Keywords					comment
Lexeme : bool							boolean_keyword
Lexeme : cuer							string_keyword
Lexeme : dec							elif_keyword
Lexeme : descanso							break_keyword
Lexeme : doble							double_keyword
Lexeme : ent							integer_keyword
Lexeme : escan							scanf_keyword
Lexeme : flot							float_keyword
Lexeme : hacer							do_keyword
Lexeme : impri							printf_keyword
Lexeme : mas							else_keyword
Lexeme : mientras							while_keyword
Lexeme : ni							or_op
Lexeme : no							not_op
Lexeme : perso							char_keyword
Lexeme : por							for_keyword
Lexeme : retorno							return_keyword
Lexeme : sequir							continue_keyword
Lexeme : si							if_keyword
Lexeme : vacio							void_keyword
Lexeme : vamos							goto_keyword
Lexeme : y							and_op
Lexeme : Reserved Word					comment
Lexeme : falso							false_reserved
Lexeme : verdad							true_reserved
Lexeme : Noise Words					comment
Lexeme : booleano							boolean_noiseword
Lexeme : decontra							elif_noiseword
Lexeme : personaje							char_noiseword
Lexeme : entero							integer_noiseword
Lexeme : escanear							scanf_noiseword
Lexeme : flotar							float_noiseword
Lexeme : cuerda							string_noiseword
Lexeme : imprimir							printf_noiseword
Lexeme : Delimeters					comment
Lexeme : :								:
Lexeme : (								(
Lexeme : )								)
Lexeme : [								[
Lexeme : ]								]
Lexeme : {								{
Lexeme : }								}
Lexeme : ,								,
Lexeme : ;								;
Lexeme : invalid					comment
Unknown input : 							@
Lexeme : _num							invalid identifier
Lexeme : */								invalid operator
Lexeme : invalid								invalid char_literal
Lexeme : 12name							invalid identifier
Lexeme : 1.2.3							invalid float_literal
Lexeme : constant value					comment
Lexeme : 9							int_literal
Lexeme : 4.5							float_literal
Lexeme : string								str_literal
Lexeme : c								char_literal
